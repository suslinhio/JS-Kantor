'use strict' 

// Тип даних Символ

/* 
Символ - це унікальний ідентифікатор. (це “примітивні унікальні значення” з додатковим описом)

Syntax:
let id = Symbol("id"); - можна додати опис id для покращення процесу налагодження (навіть символи з однаковими описами зажди будуть унікальним)

Символи дозволяють нам створювати “приховані” властивості об’єкта, до яких жодна інша частина програми не може випадково отримати доступ або перезаписати їх. Символи завжди різні, тому викоистовуючи їх ми завжди будемо точно створювати нові пропи, а не перезаписувати старі
*/

let id = Symbol('id');
alert(id.toString()); // символи приводяться до рядка ТІЛЬКИ явно

const user = {
    name: 'Dima',
}

user[id] = 1;
console.log(user[id]);

//Якщо ми хочемо використовувати символ у літералі об’єкта {...}, нам потрібні обгорнути його в квадратні дужки. Тому що символ лежить у змінній, саме змінну ми і використовуємо в якості ключа

let guestId = Symbol('id');
const guest = {
    name: 'Ihor',
    [id]: 123,
}

// Символи ігноруються циклом for…in 
// Це через принцип 'приховування символьних властивостей'
// але object.assign може копіювати символи

for (let key in guest) {
    console.log(guest[key]); // Ihor, id is ignored
}

/* глобальний реєстр символів 

Symbol.for(key)

// шукаємо в глобального реєстрі
let id = Symbol.for("id"); // якщо такого символу немає, він буде створений

// шукаємо знову, але присвоюємо в іншу змінну (можливо в іншій частині коду)
let idAgain = Symbol.for("id");

// як бачимо, це один і той самий символ
alert( id === idAgain ); // true

Symbol.keyFor() - навпаки приймає глобальний символ та повертає назву
*/

//Існує багато “системних” символів, які JavaScript використовує внутрішньо, і ми можемо використовувати їх для налаштування різних аспектів наших об’єктів.

