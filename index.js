'use strict' 

// Перетворення об’єктів в примітиви

/* 
У разі будь-яких операцій з  обєктами (+, -, alert) вони перетворюються в примітиви, примітивні значення обчислюються та повертається теж примітивне значення

Правила перетворення:

- усі обєкти - це true у булевому форматі
- чилове перетворення відбувається при відніманні дати
- рядкове перетворення відбувається при використання alert 
- за допомогою методів можна налагодити процес перетворення

Hints:

"string" - Перетворення об’єкта в рядок відбувається коли ми виконуємо операцію, яка очікує рядок, над об’єктом.

    - використання об’єкта як ключа властивості об’єкта
    - alert

"number" - 
    - явне перетворення
    - математичні операції (крім бінарного додавання)
    - порівняння менше/більше

"default" - Виникає в рідкісних випадках, коли оператор “не впевнений”, який тип очікується.
    - бінарний плюс
    - порівняння ==
    Всі вбудовані об’єкти, крім одного випадку (об’єкт Date, ми дізнаємося пізніше) реалізовують "default" перетворення так само, як "number"

** Щоб зробити перетворення, JavaScript намагається знайти та викликати три методи об’єкта: **

Викликати obj[Symbol.toPrimitive](hint) – метод з символьним ключем Symbol.toPrimitive (системний символ), якщо такий метод існує,
Інакше, якщо підказка – це "string"
спробує obj.toString() або obj.valueOf() – будь-що, що існує.
Інакше, якщо підказка – "номер" або "default"
спробує obj.valueOf() або obj.toString() – будь-що, що існує.

*/

// Symbol.toPrimitive

/* 
obj[Symbol.toPrimitive] = function(hint) {
  // тут йде код, щоб перетворити цей об’єкт в примітив
  // він повинен повернути примітивне значення
  // hint = один з "string", "number", "default"
};
*/

let user = {
    name: "Іван",
    money: 1000,
  
    [Symbol.toPrimitive](hint) {
      alert(`hint: ${hint}`);
      return hint == "string" ? `{name: "${this.name}"}` : this.money;
    }
  };
  
  // демонстрація перетворення:
  alert(user); // hint: string -> {name: "Іван"}
  alert(+user); // hint: number -> 1000
  alert(user + 500); // hint: default -> 1500

  /* If there is no Symbol.toPrimitive 
  
    Для "string" підказка: виклик методу toString, і якщо цей метод не існує або якщо він повертає об’єкт замість примітивного значення, то викликати valueOf (таким чином toString має пріоритет при перетворенні в рядок).
    Для інших підказок: valueOf, і якщо це не існує або якщо він повертає об’єкт замість примітивного значення, то toString (таким чином valueOf має пріоритет для математики).

    Метод toString повертає рядок "[object Object]".
    Метод valueOf повертає сам об’єкт.
  */

    let user2 = {
        name: "Іван",
        money: 1000,
        toString() {
            return `{name: ${this.name}}`;
        },
        valueOf() {
            return this.money;
        }
    };

   /*  alert(user2); // [object Object] - без кастомних методів
    alert(user2.valueOf() === user2); // true */

    // З кастомними методами
    alert(user2); // {name: "Іван"}
    alert(user2.valueOf()); // 1000





